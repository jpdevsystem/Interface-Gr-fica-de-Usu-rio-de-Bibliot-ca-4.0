import sqlite3
import tkinter as tk
from tkinter import messagebox

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if not nome or not nacionalidade:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

# Função para adicionar livro (sem AutorID manual)
def add_livro():
    titulo = entry_titulo_livro.get()
    autor_nome = entry_autor_nome.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    if not titulo or not autor_nome or not ano or not genero:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    
    # Buscar AutorID pelo nome
    cursor.execute('SELECT ID FROM Autores WHERE Nome = ?', (autor_nome,))
    autor = cursor.fetchone()
    if not autor:
        messagebox.showwarning('Erro', 'Autor não encontrado!')
        return
    
    autor_id = autor[0]
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, ?, ?, ?)',
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_nome.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)

# Função para adicionar empréstimo (sem LivroID manual)
def add_emprestimo():
    livro_titulo = entry_livro_titulo.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    if not livro_titulo or not data_emp or not data_dev or not usuario:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    
    # Buscar LivroID pelo título
    cursor.execute('SELECT ID FROM Livros WHERE Titulo = ?', (livro_titulo,))
    livro = cursor.fetchone()
    if not livro:
        messagebox.showwarning('Erro', 'Livro não encontrado!')
        return
    
    livro_id = livro[0]
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES (?, ?, ?, ?)',
                   (livro_id, data_emp, data_dev, usuario))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    entry_livro_titulo.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Função para visualizar autores
def view_autores():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Autores')
    autores = cursor.fetchall()
    conn.close()
    autores_list.delete(0, tk.END)
    for autor in autores:
        autores_list.insert(tk.END, autor)

# Função para visualizar livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro)

# Função para visualizar empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar empréstimos pendentes
def view_pendentes():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE DataDevolucao > date("now")')
    pendentes = cursor.fetchall()
    conn.close()
    pendentes_list.delete(0, tk.END)
    for emp in pendentes:
        pendentes_list.insert(tk.END, emp)

# Função para remover autor
def remove_autor():
    selected = autores_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um autor para remover!')
        return
    autor_id = autores_list.get(selected)[0]
    conn, cursor = connect_db()
    cursor.execute('DELETE FROM Autores WHERE ID = ?', (autor_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor removido com sucesso!')
    view_autores()

# Função para remover livro
def remove_livro():
    selected = livros_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um livro para remover!')
        return
    livro_id = livros_list.get(selected)[0]
    conn, cursor = connect_db()
    cursor.execute('DELETE FROM Livros WHERE ID = ?', (livro_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro removido com sucesso!')
    view_livros()

# Função para remover empréstimo
def remove_emprestimo():
    selected = emprestimos_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um empréstimo para remover!')
        return
    emprestimo_id = emprestimos_list.get(selected)[0]
    conn, cursor = connect_db()
    cursor.execute('DELETE FROM Emprestimos WHERE ID = ?', (emprestimo_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo removido com sucesso!')
    view_emprestimos()

# Função para atualizar dados do autor
def update_autor():
    selected = autores_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um autor para atualizar!')
        return
    autor_id = autores_list.get(selected)[0]
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if not nome or not nacionalidade:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('UPDATE Autores SET Nome = ?, Nacionalidade = ? WHERE ID = ?', (nome, nacionalidade, autor_id))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor atualizado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)
    view_autores()

# Função para atualizar dados do livro
def update_livro():
    selected = livros_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um livro para atualizar!')
        return
    livro_id = livros_list.get(selected)[0]
    titulo = entry_titulo_livro.get()
    autor_nome = entry_autor_nome.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    if not titulo or not autor_nome or not ano or not genero:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()

    # Buscar AutorID pelo nome
    cursor.execute('SELECT ID FROM Autores WHERE Nome = ?', (autor_nome,))
    autor = cursor.fetchone()
    if not autor:
        messagebox.showwarning('Erro', 'Autor não encontrado!')
        return

    autor_id = autor[0]
    cursor.execute('UPDATE Livros SET Titulo = ?, AutorID = ?, AnoPublicacao = ?, Genero = ? WHERE ID = ?',
                   (titulo, autor_id, ano, genero, livro_id))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro atualizado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_nome.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)
    view_livros()

# Função para filtrar empréstimos por nome de usuário
def filter_emprestimos():
    usuario = entry_filter_usuario.get()
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE NomeUsuario LIKE ?', ('%' + usuario + '%',))
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, emp)

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor')
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor).grid(row=2, columnspan=2, pady=5)
tk.Button(frame_autor, text='Remover Autor', command=remove_autor).grid(row=3, columnspan=2, pady=5)
tk.Button(frame_autor, text='Atualizar Autor', command=update_autor).grid(row=4, columnspan=2, pady=5)

# Frame para adicionar livros (sem AutorID manual)
frame_livro = tk.LabelFrame(root, text='Adicionar Livro')
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='Nome Autor:').grid(row=1, column=0)
entry_autor_nome = tk.Entry(frame_livro)
entry_autor_nome.grid(row=1, column=1)

tk.Label(frame_livro, text='Ano Publicação:').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro).grid(row=4, columnspan=2, pady=5)
tk.Button(frame_livro, text='Remover Livro', command=remove_livro).grid(row=5, columnspan=2, pady=5)
tk.Button(frame_livro, text='Atualizar Livro', command=update_livro).grid(row=6, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='Título Livro:').grid(row=0, column=0)
entry_livro_titulo = tk.Entry(frame_emprestimo)
entry_livro_titulo.grid(row=0, column=1)

tk.Label(frame_emprestimo, text='Data Empréstimo:').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo).grid(row=4, columnspan=2, pady=5)
tk.Button(frame_emprestimo, text='Remover Empréstimo', command=remove_emprestimo).grid(row=5, columnspan=2, pady=5)

# Frame para visualizar dados
frame_visualizar = tk.LabelFrame(root, text='Visualizar Dados')
frame_visualizar.grid(row=0, column=1, rowspan=3, padx=10, pady=10)

# Lista para mostrar os autores
autores_list = tk.Listbox(frame_visualizar, height=5, width=50)
autores_list.grid(row=0, column=0)
tk.Button(frame_visualizar, text='Visualizar Autores', command=view_autores).grid(row=1, column=0)

# Lista para mostrar os livros
livros_list = tk.Listbox(frame_visualizar, height=5, width=50)
livros_list.grid(row=2, column=0)
tk.Button(frame_visualizar, text='Visualizar Livros', command=view_livros).grid(row=3, column=0)

# Lista para mostrar os empréstimos
emprestimos_list = tk.Listbox(frame_visualizar, height=5, width=50)
emprestimos_list.grid(row=4, column=0)
tk.Button(frame_visualizar, text='Visualizar Empréstimos', command=view_emprestimos).grid(row=5, column=0)

# Lista para mostrar empréstimos pendentes
pendentes_list = tk.Listbox(frame_visualizar, height=5, width=50)
pendentes_list.grid(row=6, column=0)
tk.Button(frame_visualizar, text='Visualizar Pendentes', command=view_pendentes).grid(row=7, column=0)

# Frame para filtro de empréstimos
frame_filtro = tk.LabelFrame(root, text='Filtrar Empréstimos')
frame_filtro.grid(row=3, column=0, padx=10, pady=10)

tk.Label(frame_filtro, text='Nome Usuário:').grid(row=0, column=0)
entry_filter_usuario = tk.Entry(frame_filtro)
entry_filter_usuario.grid(row=0, column=1)

tk.Button(frame_filtro, text='Filtrar', command=filter_emprestimos).grid(row=1, columnspan=2, pady=5)

root.mainloop()
